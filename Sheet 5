#1

lst1=list(range(6))
lst2=list(range(4,12,2))
lst3=list(range(10,5,-1))
lst4=list(range(10,-15,-5))
print(lst1)
print(lst2)
print(lst3)
print(lst4)

#2
x_coor = [1, 2, 3, 4, 5]
y_coor = [2, 4, 6, 8, 10]
z_coor = [0, -1, -2, -3, -4]

points = [(x, y, z) for x, y, z in zip(x_coor, y_coor, z_coor)]
print(points)
#[(1, 2, 0), (2, 4, -1), (3, 6, -2), (4, 8, -3), (5, 10, -4)]

#3

def apply(lst, fn):
    result = []
    for elem in lst:
        result.append(fn(elem))
    return result

def add_1(num):
    return num + 1

r = apply([1, 2, 3], add_1)
print(r)
#[2, 3, 4]

def NNN(n):
    return n+1
x=map(NNN, (1,2,3))
print(list(x))
#4
v=list(map(lambda num : num+1,(1,2,3)))
print(v)
#5
def modlist(lst):
    for i in range(len(lst)):
        lst[i] = 10 * lst[i]

def modvar(num):
    num += 10
    return num

lst = [1, 2, 3]
modlist(lst)
print(lst)

x = 0
print(modvar(x))
print(x)
#[10, 20, 30]
#10
#0


#6
x = [1, 2, 10, 13, 1]
output=['true' if i%2==0 else 'false' for i in x]   
print(output)
# output = [False, True, True, False, False]
#7

class Point3D:
    def __init__(self, x=0, y=0,z=0):
        self.x = x
        self.y = y
        self.z = z

    def __str__(self):
        return f"({self.x}, {self.y},{self.z})"

    def add(self, p):
        self.x += p.x
        self.y += p.y
        self.z += p.z
        
    def subtract(self, p):
        self.x -= p.x
        self.y -= p.y
        self.z -= p.z
        

    def distance(self, p):
        delta_x = self.x - p.x
        delta_y = self.y - p.y
        delta_z = self.z - p.z

        dist = (delta_x ** 2 + delta_y ** 2 + delta_z ** 2) ** 0.5
        return dist


p1 = Point3D(1, 2, 3)
p2 = Point3D(4, -2, 1)
p3 = Point3D(4, -2, 1)
p3.subtract(p1)
p2.add(p1)
print(p2)
print(p3)
print(p1.distance(p2))
